name: CI

on:
  push:
    branches:
      - master
      - ci
jobs:
  wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-18.04
#          - macos-10.15
#          - windows-2019
#        python-version: ['3.7', '3.8', '3.9', '3.10']
        python-version: ['3.9']
        torch-version: [1.11.0]
#        cuda-version: ['cpu', 'cu102', 'cu113', 'cu115']
#        cuda-version: ['cu113']
        cuda-version: ['cpu']

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        default: true

    - name: Install CUDA ${{ matrix.cuda-version }}
      if: ${{ matrix.cuda-version != 'cpu' }}
      run: |
        bash .github/workflows/cuda/${{ matrix.cuda-version }}-${{ runner.os }}.sh

    - name: Install PyTorch ${{ matrix.torch-version }}+${{ matrix.cuda-version }}
      run: |
        pip install numpy typing-extensions dataclasses
        pip install --no-index --no-cache-dir torch==${{ matrix.torch-version}} -f https://download.pytorch.org/whl/${{ matrix.cuda-version }}/torch_stable.html
        python -c "import torch; print('PyTorch:', torch.__version__)"
        python -c "import torch; print('CUDA:', torch.version.cuda)"
        export PY_SITE_DIR=$(python -c "import site; print(site.getsitepackages()[0])")
        echo "LIBTORCH=$PY_SITE_DIR/torch"
        echo "LIBTORCH=$PY_SITE_DIR/torch" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$PY_SITE_DIR/torch/lib:$LD_LIBRARY_PATH"
        echo "LD_LIBRARY_PATH=$PY_SITE_DIR/torch/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

    - uses: messense/maturin-action@v1
      with:
        manylinux: auto
        command: build
        args: --release -o dist
      env:
        LIBTORCH_CXX11_ABI: "0"
        LIBTORCH: ${{ env.LIBTORCH }}
        LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}

    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

#  windows:
#    runs-on: windows-latest
#    steps:
#    - uses: actions/checkout@v2
#    - uses: messense/maturin-action@v1
#      with:
#        command: build
#        args: --release --no-sdist -o dist
#    - name: Upload wheels
#      uses: actions/upload-artifact@v2
#      with:
#        name: wheels
#        path: dist
#
#  macos:
#    runs-on: macos-latest
#    steps:
#    - uses: actions/checkout@v2
#    - uses: messense/maturin-action@v1
#      with:
#        command: build
#        args: --release --no-sdist -o dist --universal2
#    - name: Upload wheels
#      uses: actions/upload-artifact@v2
#      with:
#        name: wheels
#        path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [ wheel ]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - name: Publish to PyPI
        uses: messense/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --skip-existing *

# act-CI-wheel